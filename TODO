NOTES

- Discussion about file types (.mawe, .mawe.gz, versioned file) moved
  to separate document (docs/FileTypes.txt).

-------------------------------------------------------------------------------

SHORT TERM TODO:

The main objective is to make versions working! That is needed urgently! It 
won't take long time when I need an editor, where I can store the existing 
version as a version, and use it to create new one.

So, aim to single-part editor, supporting body and notes sections, very
similar to current Python version. Support for multiple parts can be added 
later.

We can make very simple, notepad-like editor as a starting point! We can add
fancier features later. Basically, I first need editor to replace current Python 
version - in fact, not even that, as I can use the Python version for tasks that 
can not be done with Electron version yet.

TODO:

- Content editing: support for standard features. It is doable, if you can:

  - apply scene header, comments, missing,
  - save in readable format,
  - maybe have clickable index.
  - other features can be added later.
 
- Work toward saving the edited content: Serialize doc from Slate editor

- Move CWD to application level, so that app remembers in which directory it was

- When directory is opened from search, change directory accordingly (probably the
  best is to use the directory where the search was initiated? Or the directory
  where the opened file is?)

- Organizer? An own view to move parts and scenes around stories.

- Cards or something alike. Main feature: card has a tag, that can be scanned
  through text to recognize things.

-------------------------------------------------------------------------------

PROJECT MANAGEMENT

It would be best to remove project management fields from the story itself.
It would be safer, if fields like status and deadline would be saved in their
own database. That way we could change the field values without touching the
story itself.

- The PM fields would be saved to the file itself once it is loaded and 
  saved (that is, when loading, PM fields would override the fields in the 
  file)

- Project manager: dirs to scan, scan dirs and extract headers etc.

-------------------------------------------------------------------------------

SAVING FILES

I am a bit paranoid about saving files, because if there are bugs in the
saving process, it may lead to great losses. I might need to reinforce
the saving process:

- When buffer is done, try to open it and compare it to the doc that
  was given to be saved. If they differ, don't save.

- I might need to go to some kind of versioning file system just to make
  myself to feel more relaxed...

-------------------------------------------------------------------------------

VERSIONS:

- Modification time needed mainly when saving versions (so that you know
  when that version was modified last time) needs to be thought...

-------------------------------------------------------------------------------

FUTURE:

- I might switch render functions to classes. They work nicer with states.

- Slack has nice feature: when you press arrow up at first line, it creates
  new empty line, if the first line has some formatting (e.g. <pre></pre>). We 
  could incorporate this feature to the editor, too.

- Import RTF: https://www.npmjs.com/package/rtf-parser - many writers Use
  Word or similar, and they can make RTFs.

- Borrow ideas to file browser from Dropbox web browser.

- Can we do / do we need fake app for test bench?

- Command line usage? It would be great if you could run the software without
  window, just from command line. It would give all sorts of great opportunities
  to integrate editor to other systems (e.g. automatic exports and other
  operations). You could basically make some automatic imports, too?

-------------------------------------------------------------------------------

DONE:

- Some kind of test bench for e.g. file operations would be great! That is,
  testing file loading & saving, directory scanning and so on.
      
--> it would be great, if file & document operations would work also
    in plain node (that is, without electron). I am sure that at Some
    point I like to have command line tools for e.g. exporting stories
    in different format.

- Make fake window to test code on plain node

- Get rid of body.modified - it makes version control very difficult.

- Check: load -> save --> produces same buffer. A more precise test
  needs to be created later.

- Integrate file browser and editor parts together: file browser can be 
  used to select file, editor to edit it.

- Infinite scroll bar on find stopped working, it won't fetch more items anymore.
  BUT WHY?!? Because the outer element was extending to the content and so the
  infinite scroll didn't have its scrollbar.

- TODO: Implement a separator, which takes its orientation from the surrounding
  box.

- Editor component needs Document, not file name. Loading of the document needs
  to be handled elsewhere.

